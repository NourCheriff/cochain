// <auto-generated />
using System;
using CochainAPI.Data.Sql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CochainAPI.Data.Sql.Migrations
{
    [DbContext(typeof(CochainDBContext))]
    partial class CochainDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CochainAPI.Model.Authentication.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CertificationAuthorityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<Guid?>("SupplyChainPartnerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CertificationAuthorityId");

                    b.HasIndex("SupplyChainPartnerId");

                    b.ToTable("User", t =>
                        {
                            t.HasCheckConstraint("CK_User_PartnerOrAuthority", "\"SupplyChainPartnerId\" IS NOT NULL OR \"CertificationAuthorityId\" IS NOT NULL");
                        });

                    b.HasData(
                        new
                        {
                            Id = "5e4b0ca8-aa85-417a-af23-035ac1b555cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86280c4e-30e4-478e-bc4e-d9ffe6a22b71",
                            Email = "System",
                            EmailConfirmed = false,
                            FirstName = "System",
                            IsActive = true,
                            LastName = "System",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4da68d6c-ecdf-4f7a-9852-57f45a96057e",
                            SupplyChainPartnerId = new Guid("d65e685f-8bdd-470b-a6b8-c9a62e39f095"),
                            TwoFactorEnabled = false,
                            UserName = "System"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.Authentication.UserTemporaryPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTemporaryPassword");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09f67853-ff83-440c-9ab1-c6de458c6e42"),
                            ExpirationDate = new DateTime(2027, 3, 5, 16, 28, 57, 362, DateTimeKind.Utc).AddTicks(330),
                            IsUsed = false,
                            Password = "System",
                            UserId = "5e4b0ca8-aa85-417a-af23-035ac1b555cd"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.CarbonOffset.CarbonOffsettingAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float>("Offset")
                        .HasColumnType("real");

                    b.Property<Guid>("SupplyChainPartnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SupplyChainPartnerId");

                    b.ToTable("CarbonOffsettingAction");
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.CertificationAuthority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyTypeId");

                    b.ToTable("CertificationAuthority");
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.CompanyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompanyType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6173d450-c48a-4f24-82f6-f012413ff6f4"),
                            Name = "SCP"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.SupplyChainPartner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyTypeId")
                        .HasColumnType("uuid");

                    b.Property<float>("Credits")
                        .HasColumnType("real");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<Guid>("SupplyChainPartnerTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyTypeId");

                    b.HasIndex("SupplyChainPartnerTypeId");

                    b.ToTable("SupplyChainPartner");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d65e685f-8bdd-470b-a6b8-c9a62e39f095"),
                            CompanyTypeId = new Guid("6173d450-c48a-4f24-82f6-f012413ff6f4"),
                            Credits = 0f,
                            Email = "company@prova.com",
                            Name = "Prova company",
                            Phone = "33309090909",
                            SupplyChainPartnerTypeId = new Guid("ef0e7db4-760e-4515-9aa0-bda3fc766e87")
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.SupplyChainPartnerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Baseline")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SupplyChainPartnerType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef0e7db4-760e-4515-9aa0-bda3fc766e87"),
                            Baseline = 1000f,
                            Name = "Trasporto"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductLifeCycleCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupplyChainPartnerReceiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserEmitterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductLifeCycleCategoryId");

                    b.HasIndex("SupplyChainPartnerReceiverId");

                    b.HasIndex("UserEmitterId");

                    b.ToTable("Contract");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c7467f1b-4739-48ea-9fcd-4762fb5090e1"),
                            Path = "/home/contract1.pdf",
                            ProductLifeCycleCategoryId = new Guid("7de440aa-63d8-4a97-87b1-79781f7b8349"),
                            SupplyChainPartnerReceiverId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Type = "Contract",
                            UserEmitterId = "5e4b0ca8-aa85-417a-af23-035ac1b555cd"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.ProductDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductInfoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupplyChainPartnerReceiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserEmitterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductInfoId");

                    b.HasIndex("SupplyChainPartnerReceiverId");

                    b.HasIndex("UserEmitterId");

                    b.ToTable("ProductDocument");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.ProductLifeCycleDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductLifeCycleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupplyChainPartnerReceiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserEmitterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductLifeCycleId");

                    b.HasIndex("SupplyChainPartnerReceiverId");

                    b.HasIndex("UserEmitterId");

                    b.ToTable("ProductLifeCycleDocument");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.SupplyChainPartnerCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QualityStandard")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SupplyChainPartnerReceiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserEmitterId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SupplyChainPartnerReceiverId");

                    b.HasIndex("UserEmitterId");

                    b.ToTable("SupplyChainPartnerCertificate");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc02d0d2-1368-40e5-aed3-3389032f4de0"),
                            CategoryId = new Guid("a895a940-cd9f-42c4-a898-34f7bb5e513e"),
                            Description = "Prodotto di prova"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a895a940-cd9f-42c4-a898-34f7bb5e513e"),
                            Description = "Categoria del prodotto di prova"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupplyChainPartnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplyChainPartnerId");

                    b.ToTable("ProductInfo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c06df94-1fff-4f54-b188-8326203e2a89"),
                            ExpirationDate = new DateOnly(1, 1, 1),
                            ProductId = new Guid("20b4dadf-3bff-428c-a026-b509e6620cc0"),
                            SupplyChainPartnerId = new Guid("9c389eba-e008-4030-a544-010232e3bbe2")
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductIngredient", b =>
                {
                    b.Property<Guid>("ProductInfoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductInfoId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("ProductIngredient");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductLifeCycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Emissions")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductInfoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductLifeCycleCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupplyChainPartnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductInfoId");

                    b.HasIndex("ProductLifeCycleCategoryId");

                    b.HasIndex("SupplyChainPartnerId");

                    b.ToTable("ProductLifeCycle");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7de440aa-63d8-4a97-87b1-79781f7b8349"),
                            Emissions = 0f,
                            ProductInfoId = new Guid("20b4dadf-3bff-428c-a026-b509e6620cc0"),
                            ProductLifeCycleCategoryId = new Guid("00000000-0000-0000-0000-000000000000"),
                            SupplyChainPartnerId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductLifeCycleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductLifeCycleCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7de440aa-63d8-4a97-87b1-79781f7b8349"),
                            Description = "Categoria attività di prova"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.Utils.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cookies")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("QueryString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole<Guid>");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e342ad6-78d9-4aee-abe5-245b1fae6c4a"),
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("cb5b1ae5-43db-4096-9bd6-2afb90fb20c5"),
                            Name = "SupplyChainPartner",
                            NormalizedName = "SupplyChainPartner"
                        },
                        new
                        {
                            Id = new Guid("f6e7ea1d-a99e-4a5c-9a23-2274ba2c62ea"),
                            Name = "Certifier",
                            NormalizedName = "Certifier"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "5e4b0ca8-aa85-417a-af23-035ac1b555cd",
                            RoleId = "8e342ad6-78d9-4aee-abe5-245b1fae6c4a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Value", "UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("CochainAPI.Model.Authentication.User", b =>
                {
                    b.HasOne("CochainAPI.Model.CompanyEntities.CertificationAuthority", "CertificationAuthority")
                        .WithMany()
                        .HasForeignKey("CertificationAuthorityId");

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartner")
                        .WithMany()
                        .HasForeignKey("SupplyChainPartnerId");

                    b.Navigation("CertificationAuthority");

                    b.Navigation("SupplyChainPartner");
                });

            modelBuilder.Entity("CochainAPI.Model.Authentication.UserTemporaryPassword", b =>
                {
                    b.HasOne("CochainAPI.Model.Authentication.User", "User")
                        .WithMany("TemporaryPasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CochainAPI.Model.CarbonOffset.CarbonOffsettingAction", b =>
                {
                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartner")
                        .WithMany("CarbonOffsettingActions")
                        .HasForeignKey("SupplyChainPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplyChainPartner");
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.CertificationAuthority", b =>
                {
                    b.HasOne("CochainAPI.Model.CompanyEntities.CompanyType", "CompanyType")
                        .WithMany()
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyType");
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.SupplyChainPartner", b =>
                {
                    b.HasOne("CochainAPI.Model.CompanyEntities.CompanyType", "CompanyType")
                        .WithMany()
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartnerType", "SupplyChainPartnerType")
                        .WithMany()
                        .HasForeignKey("SupplyChainPartnerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyType");

                    b.Navigation("SupplyChainPartnerType");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.Contract", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductLifeCycleCategory", "ProductLifeCycleCategory")
                        .WithMany()
                        .HasForeignKey("ProductLifeCycleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartnerReceiver")
                        .WithMany("ReceivedContract")
                        .HasForeignKey("SupplyChainPartnerReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.Authentication.User", "UserEmitter")
                        .WithMany("EmittedContract")
                        .HasForeignKey("UserEmitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductLifeCycleCategory");

                    b.Navigation("SupplyChainPartnerReceiver");

                    b.Navigation("UserEmitter");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.ProductDocument", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductInfo", "ProductInfo")
                        .WithMany("ProductDocuments")
                        .HasForeignKey("ProductInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartnerReceiver")
                        .WithMany("ReceivedProductDocument")
                        .HasForeignKey("SupplyChainPartnerReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.Authentication.User", "UserEmitter")
                        .WithMany("EmittedProductDocument")
                        .HasForeignKey("UserEmitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInfo");

                    b.Navigation("SupplyChainPartnerReceiver");

                    b.Navigation("UserEmitter");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.ProductLifeCycleDocument", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductLifeCycle", "ProductLifeCycle")
                        .WithMany("ProductLifeCycleDocuments")
                        .HasForeignKey("ProductLifeCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartnerReceiver")
                        .WithMany("ReceivedProductLifeCycleDocument")
                        .HasForeignKey("SupplyChainPartnerReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.Authentication.User", "UserEmitter")
                        .WithMany("EmittedProductLifeCycleDocument")
                        .HasForeignKey("UserEmitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductLifeCycle");

                    b.Navigation("SupplyChainPartnerReceiver");

                    b.Navigation("UserEmitter");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.SupplyChainPartnerCertificate", b =>
                {
                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartnerReceiver")
                        .WithMany("ReceivedSupplyChainPartnerCertificate")
                        .HasForeignKey("SupplyChainPartnerReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.Authentication.User", "UserEmitter")
                        .WithMany("EmittedSupplyChainPartnerCertificate")
                        .HasForeignKey("UserEmitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplyChainPartnerReceiver");

                    b.Navigation("UserEmitter");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.Product", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductInfo", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartner")
                        .WithMany()
                        .HasForeignKey("SupplyChainPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SupplyChainPartner");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductIngredient", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.Product", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.Product.ProductInfo", "ProductInfo")
                        .WithMany("Ingredients")
                        .HasForeignKey("ProductInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("ProductInfo");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductLifeCycle", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductInfo", "ProductInfo")
                        .WithMany("ProductLifeCycles")
                        .HasForeignKey("ProductInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.Product.ProductLifeCycleCategory", "ProductLifeCycleCategory")
                        .WithMany()
                        .HasForeignKey("ProductLifeCycleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartner")
                        .WithMany()
                        .HasForeignKey("SupplyChainPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInfo");

                    b.Navigation("ProductLifeCycleCategory");

                    b.Navigation("SupplyChainPartner");
                });

            modelBuilder.Entity("CochainAPI.Model.Utils.Log", b =>
                {
                    b.HasOne("CochainAPI.Model.Authentication.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CochainAPI.Model.Authentication.User", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CochainAPI.Model.Authentication.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CochainAPI.Model.Authentication.User", b =>
                {
                    b.Navigation("EmittedContract");

                    b.Navigation("EmittedProductDocument");

                    b.Navigation("EmittedProductLifeCycleDocument");

                    b.Navigation("EmittedSupplyChainPartnerCertificate");

                    b.Navigation("Logs");

                    b.Navigation("TemporaryPasswords");

                    b.Navigation("UserClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.SupplyChainPartner", b =>
                {
                    b.Navigation("CarbonOffsettingActions");

                    b.Navigation("ReceivedContract");

                    b.Navigation("ReceivedProductDocument");

                    b.Navigation("ReceivedProductLifeCycleDocument");

                    b.Navigation("ReceivedSupplyChainPartnerCertificate");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductInfo", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("ProductDocuments");

                    b.Navigation("ProductLifeCycles");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductLifeCycle", b =>
                {
                    b.Navigation("ProductLifeCycleDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
