// <auto-generated />
using System;
using CochainAPI.Data.Sql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CochainAPI.Data.Sql.Migrations
{
    [DbContext(typeof(CochainDBContext))]
    partial class CochainDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CochainAPI.Model.Authentication.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CertificationAuthorityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<Guid?>("SupplyChainPartnerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CertificationAuthorityId");

                    b.HasIndex("SupplyChainPartnerId");

                    b.ToTable("User", t =>
                        {
                            t.HasCheckConstraint("CK_User_PartnerOrAuthority", "(\"SupplyChainPartnerId\" IS NOT NULL AND \"CertificationAuthorityId\" IS NULL)\n                    OR (\"SupplyChainPartnerId\" IS NULL AND \"CertificationAuthorityId\" IS NOT NULL)");
                        });

                    b.HasData(
                        new
                        {
                            Id = "ad00648b-a031-432d-b007-6a0829cf5292",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "85d445b3-6c45-440a-91b6-4ef479d799a6",
                            EmailConfirmed = false,
                            FirstName = "System",
                            IsActive = true,
                            LastName = "System",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b22f9512-bcff-4f97-b5dc-208a5e40db15",
                            SupplyChainPartnerId = new Guid("d65e685f-8bdd-470b-a6b8-c9a62e39f095"),
                            TwoFactorEnabled = false,
                            UserName = "admin@cochain.com"
                        },
                        new
                        {
                            Id = "5e4b0ca8-aa85-417a-af23-035ac1b555cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29c57c37-62df-45ef-9c17-6f2dee08e6eb",
                            EmailConfirmed = false,
                            FirstName = "Paolo",
                            IsActive = true,
                            LastName = "Roselli",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa9baacb-fad0-400c-bb6d-039fd74f4f27",
                            SupplyChainPartnerId = new Guid("d65e685f-8bdd-470b-a6b8-c9a62e39f095"),
                            TwoFactorEnabled = false,
                            UserName = "paolo.roselli02@gmail.com"
                        },
                        new
                        {
                            Id = "0a317b04-2f87-4b08-8ad8-597103527584",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14538df9-eff1-49b0-87bf-c8b097167ba1",
                            EmailConfirmed = false,
                            FirstName = "Matteo",
                            IsActive = true,
                            LastName = "Spiga",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a7ba693b-93a8-47f4-b3a7-7eb18cb181d5",
                            SupplyChainPartnerId = new Guid("d65e685f-8bdd-470b-a6b8-c9a62e39f095"),
                            TwoFactorEnabled = false,
                            UserName = "matteospiga2002@gmail.com"
                        },
                        new
                        {
                            Id = "a12c3708-0486-4603-b1a5-46d252e79082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9c313f2-39dd-4986-b54a-370db69b4279",
                            EmailConfirmed = false,
                            FirstName = "Cherif",
                            IsActive = true,
                            LastName = "Nour",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a496e98f-b6f1-4961-8c41-0ea8d20267da",
                            SupplyChainPartnerId = new Guid("d65e685f-8bdd-470b-a6b8-c9a62e39f095"),
                            TwoFactorEnabled = false,
                            UserName = "nourcherif.pitos25@gmail.com"
                        },
                        new
                        {
                            Id = "3542da56-0de3-4797-a059-effff257f63d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f97094ca-a26e-49b6-8bf8-949a8c13e912",
                            EmailConfirmed = false,
                            FirstName = "Mattia",
                            IsActive = true,
                            LastName = "Mandorlini",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "73861d6c-6a19-46c5-92b4-a6d1527b1aff",
                            SupplyChainPartnerId = new Guid("d65e685f-8bdd-470b-a6b8-c9a62e39f095"),
                            TwoFactorEnabled = false,
                            UserName = "mando3228@gmail.com"
                        },
                        new
                        {
                            Id = "f4242b5f-4b39-45fc-802e-391293414546",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d58ebf1b-2fae-4bff-ae54-fa42aeb55d19",
                            EmailConfirmed = false,
                            FirstName = "Samuele",
                            IsActive = true,
                            LastName = "Sacchetti",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c098cdb-2122-49c2-ab93-169cfe3cb0ec",
                            SupplyChainPartnerId = new Guid("d65e685f-8bdd-470b-a6b8-c9a62e39f095"),
                            TwoFactorEnabled = false,
                            UserName = "sacchettisamuele@gmail.com"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.Authentication.UserTemporaryPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Attempts")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTemporaryPassword");
                });

            modelBuilder.Entity("CochainAPI.Model.CarbonOffset.CarbonOffsettingAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmissionTransactionId")
                        .HasColumnType("text");

                    b.Property<bool>("IsProcessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float>("Offset")
                        .HasColumnType("real");

                    b.Property<Guid>("SupplyChainPartnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SupplyChainPartnerId");

                    b.ToTable("CarbonOffsettingAction");
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.CertificationAuthority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CertificationAuthority");
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.SupplyChainPartner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Credits")
                        .HasColumnType("real");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<Guid>("SupplyChainPartnerTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("WalletId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SupplyChainPartnerTypeId");

                    b.ToTable("SupplyChainPartner");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d65e685f-8bdd-470b-a6b8-c9a62e39f095"),
                            Credits = 0f,
                            Email = "company@prova.com",
                            Name = "Prova company",
                            Phone = "33309090909",
                            SupplyChainPartnerTypeId = new Guid("ef0e7db4-760e-4515-9aa0-bda3fc766e87"),
                            WalletId = "0x3a9f1b7c5d2e8a4f6c0e7d3b5a2f9c1"
                        },
                        new
                        {
                            Id = new Guid("3a9f1b7c-5d2e-4a4f-8a6c-0e7d3b5a2f9c"),
                            Credits = 0f,
                            Email = "company2@prova.com",
                            Name = "Prova company2",
                            Phone = "3669045897",
                            SupplyChainPartnerTypeId = new Guid("ef0e7db4-760e-4515-9aa0-bda3fc766e87"),
                            WalletId = "0x7c5d1a3f9b2e6f0d8c4a7e3b5c2f9d1"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.SupplyChainPartnerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Baseline")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SupplyChainPartnerType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1117db4-760e-4515-9aa0-11a3fa766e87"),
                            Baseline = 1000f,
                            Name = "Materia Prima"
                        },
                        new
                        {
                            Id = new Guid("ef0e7db4-760e-4515-9aa0-bda3fc766e87"),
                            Baseline = 1000f,
                            Name = "Trasportatore"
                        },
                        new
                        {
                            Id = new Guid("ef01b3b4-760e-4515-9aa0-bdab7c766e87"),
                            Baseline = 1000f,
                            Name = "Trasformazione"
                        },
                        new
                        {
                            Id = new Guid("ab2e7db4-760e-4515-9aa0-bda314266e87"),
                            Baseline = 1000f,
                            Name = "Stoccaggio"
                        },
                        new
                        {
                            Id = new Guid("ef0e7124-744e-1115-9ba0-bda3fc766e87"),
                            Baseline = 1000f,
                            Name = "Rivenditore Dettaglio"
                        },
                        new
                        {
                            Id = new Guid("eaae7124-761e-4515-9aa0-bda3fc7aee87"),
                            Baseline = 1000f,
                            Name = "Grossista"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.Transaction", b =>
                {
                    b.Property<string>("TransactionHash")
                        .HasColumnType("text");

                    b.Property<string>("WalletIdEmitter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WalletIdReceiver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TransactionHash");

                    b.HasIndex("WalletIdEmitter");

                    b.HasIndex("WalletIdReceiver");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductLifeCycleCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupplyChainPartnerReceiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UserEmitterId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductLifeCycleCategoryId");

                    b.HasIndex("SupplyChainPartnerReceiverId");

                    b.HasIndex("UserEmitterId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.ProductDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductInfoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupplyChainPartnerReceiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UserEmitterId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductInfoId");

                    b.HasIndex("SupplyChainPartnerReceiverId");

                    b.HasIndex("UserEmitterId");

                    b.ToTable("ProductDocument");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.ProductLifeCycleDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductLifeCycleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupplyChainPartnerReceiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UserEmitterId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductLifeCycleId");

                    b.HasIndex("SupplyChainPartnerReceiverId");

                    b.HasIndex("UserEmitterId");

                    b.ToTable("ProductLifeCycleDocument");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.SupplyChainPartnerCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("QualityStandard")
                        .HasColumnType("text");

                    b.Property<Guid>("SupplyChainPartnerReceiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UserEmitterId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SupplyChainPartnerReceiverId");

                    b.HasIndex("UserEmitterId");

                    b.ToTable("SupplyChainPartnerCertificate");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupplyChainPartnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplyChainPartnerId");

                    b.ToTable("ProductInfo");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductIngredient", b =>
                {
                    b.Property<Guid>("ProductInfoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductInfoId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("ProductIngredient");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductLifeCycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmissionTransactionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Emissions")
                        .HasColumnType("real");

                    b.Property<bool>("IsEmissionProcessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductInfoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductLifeCycleCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupplyChainPartnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductInfoId");

                    b.HasIndex("ProductLifeCycleCategoryId");

                    b.HasIndex("SupplyChainPartnerId");

                    b.ToTable("ProductLifeCycle");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductLifeCycleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductLifeCycleCategory");
                });

            modelBuilder.Entity("CochainAPI.Model.Utils.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cookies")
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("QueryString")
                        .HasColumnType("text");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "8e342ad6-78d9-4aee-abe5-245b1fae6c4a",
                            Name = "SystemAdmin",
                            NormalizedName = "SYSTEMADMIN"
                        },
                        new
                        {
                            Id = "cb5b1ae5-43db-4096-9bd6-2afb90fb20c5",
                            Name = "AdminSCP",
                            NormalizedName = "ADMINSCP"
                        },
                        new
                        {
                            Id = "f6e7ea1d-a99e-4a5c-9a23-2274ba2c62ea",
                            Name = "AdminCA",
                            NormalizedName = "ADMINCA"
                        },
                        new
                        {
                            Id = "a0e8b03e-0cd8-4458-a147-1a4b88df2997",
                            Name = "UserSCP",
                            NormalizedName = "USERSCP"
                        },
                        new
                        {
                            Id = "3318013d-0cdd-4749-9ab3-6fdca9b64564",
                            Name = "UserCA",
                            NormalizedName = "USERCA"
                        },
                        new
                        {
                            Id = "916a3160-05e5-4821-88fe-9e46a43d157c",
                            Name = "SCPTransporter",
                            NormalizedName = "SCPTRANSPORTER"
                        },
                        new
                        {
                            Id = "cccf28ca-b2f8-477f-a2c1-2436cd83ec0c",
                            Name = "SCPRawMaterial",
                            NormalizedName = "SCPRAWMATERIAL"
                        },
                        new
                        {
                            Id = "f08d90db-ac61-4c92-a229-ef803b672e60",
                            Name = "SCPTransformator",
                            NormalizedName = "SCPTRANSFORMATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "ad00648b-a031-432d-b007-6a0829cf5292",
                            RoleId = "8e342ad6-78d9-4aee-abe5-245b1fae6c4a"
                        },
                        new
                        {
                            UserId = "5e4b0ca8-aa85-417a-af23-035ac1b555cd",
                            RoleId = "8e342ad6-78d9-4aee-abe5-245b1fae6c4a"
                        },
                        new
                        {
                            UserId = "0a317b04-2f87-4b08-8ad8-597103527584",
                            RoleId = "8e342ad6-78d9-4aee-abe5-245b1fae6c4a"
                        },
                        new
                        {
                            UserId = "a12c3708-0486-4603-b1a5-46d252e79082",
                            RoleId = "8e342ad6-78d9-4aee-abe5-245b1fae6c4a"
                        },
                        new
                        {
                            UserId = "3542da56-0de3-4797-a059-effff257f63d",
                            RoleId = "8e342ad6-78d9-4aee-abe5-245b1fae6c4a"
                        },
                        new
                        {
                            UserId = "f4242b5f-4b39-45fc-802e-391293414546",
                            RoleId = "8e342ad6-78d9-4aee-abe5-245b1fae6c4a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Value", "UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("CochainAPI.Model.Authentication.User", b =>
                {
                    b.HasOne("CochainAPI.Model.CompanyEntities.CertificationAuthority", "CertificationAuthority")
                        .WithMany()
                        .HasForeignKey("CertificationAuthorityId");

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartner")
                        .WithMany()
                        .HasForeignKey("SupplyChainPartnerId");

                    b.Navigation("CertificationAuthority");

                    b.Navigation("SupplyChainPartner");
                });

            modelBuilder.Entity("CochainAPI.Model.Authentication.UserTemporaryPassword", b =>
                {
                    b.HasOne("CochainAPI.Model.Authentication.User", "User")
                        .WithMany("TemporaryPasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CochainAPI.Model.CarbonOffset.CarbonOffsettingAction", b =>
                {
                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartner")
                        .WithMany("CarbonOffsettingActions")
                        .HasForeignKey("SupplyChainPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplyChainPartner");
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.SupplyChainPartner", b =>
                {
                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartnerType", "SupplyChainPartnerType")
                        .WithMany()
                        .HasForeignKey("SupplyChainPartnerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplyChainPartnerType");
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.Transaction", b =>
                {
                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "supplyChainPartnerEmitter")
                        .WithMany("EmittedTransactions")
                        .HasForeignKey("WalletIdEmitter")
                        .HasPrincipalKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "supplyChainPartnerReceiver")
                        .WithMany("ReceivedTransactions")
                        .HasForeignKey("WalletIdReceiver")
                        .HasPrincipalKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("supplyChainPartnerEmitter");

                    b.Navigation("supplyChainPartnerReceiver");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.Contract", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductLifeCycleCategory", "ProductLifeCycleCategory")
                        .WithMany()
                        .HasForeignKey("ProductLifeCycleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartnerReceiver")
                        .WithMany("ReceivedContract")
                        .HasForeignKey("SupplyChainPartnerReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.Authentication.User", "UserEmitter")
                        .WithMany("EmittedContract")
                        .HasForeignKey("UserEmitterId");

                    b.Navigation("ProductLifeCycleCategory");

                    b.Navigation("SupplyChainPartnerReceiver");

                    b.Navigation("UserEmitter");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.ProductDocument", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductInfo", "ProductInfo")
                        .WithMany("ProductDocuments")
                        .HasForeignKey("ProductInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartnerReceiver")
                        .WithMany("ReceivedProductDocument")
                        .HasForeignKey("SupplyChainPartnerReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.Authentication.User", "UserEmitter")
                        .WithMany("EmittedProductDocument")
                        .HasForeignKey("UserEmitterId");

                    b.Navigation("ProductInfo");

                    b.Navigation("SupplyChainPartnerReceiver");

                    b.Navigation("UserEmitter");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.ProductLifeCycleDocument", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductLifeCycle", "ProductLifeCycle")
                        .WithMany("ProductLifeCycleDocuments")
                        .HasForeignKey("ProductLifeCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartnerReceiver")
                        .WithMany("ReceivedProductLifeCycleDocument")
                        .HasForeignKey("SupplyChainPartnerReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.Authentication.User", "UserEmitter")
                        .WithMany("EmittedProductLifeCycleDocument")
                        .HasForeignKey("UserEmitterId");

                    b.Navigation("ProductLifeCycle");

                    b.Navigation("SupplyChainPartnerReceiver");

                    b.Navigation("UserEmitter");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.SupplyChainPartnerCertificate", b =>
                {
                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartnerReceiver")
                        .WithMany("ReceivedSupplyChainPartnerCertificate")
                        .HasForeignKey("SupplyChainPartnerReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.Authentication.User", "UserEmitter")
                        .WithMany("EmittedSupplyChainPartnerCertificate")
                        .HasForeignKey("UserEmitterId");

                    b.Navigation("SupplyChainPartnerReceiver");

                    b.Navigation("UserEmitter");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.Product", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductInfo", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartner")
                        .WithMany()
                        .HasForeignKey("SupplyChainPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SupplyChainPartner");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductIngredient", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductInfo", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.Product.ProductInfo", "ProductInfo")
                        .WithMany("Ingredients")
                        .HasForeignKey("ProductInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("ProductInfo");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductLifeCycle", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductInfo", "ProductInfo")
                        .WithMany("ProductLifeCycles")
                        .HasForeignKey("ProductInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.Product.ProductLifeCycleCategory", "ProductLifeCycleCategory")
                        .WithMany()
                        .HasForeignKey("ProductLifeCycleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartner")
                        .WithMany()
                        .HasForeignKey("SupplyChainPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInfo");

                    b.Navigation("ProductLifeCycleCategory");

                    b.Navigation("SupplyChainPartner");
                });

            modelBuilder.Entity("CochainAPI.Model.Utils.Log", b =>
                {
                    b.HasOne("CochainAPI.Model.Authentication.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CochainAPI.Model.Authentication.User", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CochainAPI.Model.Authentication.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CochainAPI.Model.Authentication.User", b =>
                {
                    b.Navigation("EmittedContract");

                    b.Navigation("EmittedProductDocument");

                    b.Navigation("EmittedProductLifeCycleDocument");

                    b.Navigation("EmittedSupplyChainPartnerCertificate");

                    b.Navigation("Logs");

                    b.Navigation("TemporaryPasswords");

                    b.Navigation("UserClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.SupplyChainPartner", b =>
                {
                    b.Navigation("CarbonOffsettingActions");

                    b.Navigation("EmittedTransactions");

                    b.Navigation("ReceivedContract");

                    b.Navigation("ReceivedProductDocument");

                    b.Navigation("ReceivedProductLifeCycleDocument");

                    b.Navigation("ReceivedSupplyChainPartnerCertificate");

                    b.Navigation("ReceivedTransactions");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductInfo", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("ProductDocuments");

                    b.Navigation("ProductLifeCycles");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductLifeCycle", b =>
                {
                    b.Navigation("ProductLifeCycleDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
