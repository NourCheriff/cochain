// <auto-generated />
using System;
using CochainAPI.Data.Sql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CochainAPI.Data.Sql.Migrations
{
    [DbContext(typeof(CochainDBContext))]
    [Migration("20250331201234_AddNewUser")]
    partial class AddNewUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CochainAPI.Model.Authentication.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CertificationAuthorityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<Guid?>("SupplyChainPartnerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CertificationAuthorityId");

                    b.HasIndex("SupplyChainPartnerId");

                    b.ToTable("User", t =>
                        {
                            t.HasCheckConstraint("CK_User_PartnerOrAuthority", "(\"SupplyChainPartnerId\" IS NOT NULL AND \"CertificationAuthorityId\" IS NULL)\n                    OR (\"SupplyChainPartnerId\" IS NULL AND \"CertificationAuthorityId\" IS NOT NULL)");
                        });

                    b.HasData(
                        new
                        {
                            Id = "ad00648b-a031-432d-b007-6a0829cf5292",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ccbcfd9-634c-4a0d-b0f4-0df8d2974ca1",
                            EmailConfirmed = false,
                            FirstName = "System",
                            IsActive = true,
                            LastName = "System",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80ce3e6e-0639-4976-b833-a5abfb8a241f",
                            SupplyChainPartnerId = new Guid("81124c04-840a-49c1-8929-073af4cee139"),
                            TwoFactorEnabled = false,
                            UserName = "admin@cochain.com"
                        },
                        new
                        {
                            Id = "5e4b0ca8-aa85-417a-af23-035ac1b555cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e445913f-6b14-4cc0-a65d-e1f60e614c42",
                            EmailConfirmed = false,
                            FirstName = "Paolo",
                            IsActive = true,
                            LastName = "Roselli",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8ad517e-8b6b-434d-ac96-576191593644",
                            SupplyChainPartnerId = new Guid("81124c04-840a-49c1-8929-073af4cee139"),
                            TwoFactorEnabled = false,
                            UserName = "paolo.roselli02@gmail.com"
                        },
                        new
                        {
                            Id = "0a317b04-2f87-4b08-8ad8-597103527584",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "34422b5c-b3e1-4ffb-a321-de3ccab0cada",
                            EmailConfirmed = false,
                            FirstName = "Matteo",
                            IsActive = true,
                            LastName = "Spiga",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5fb4d314-e02d-4a78-abef-bf05da265125",
                            SupplyChainPartnerId = new Guid("81124c04-840a-49c1-8929-073af4cee139"),
                            TwoFactorEnabled = false,
                            UserName = "matteospiga2002@gmail.com"
                        },
                        new
                        {
                            Id = "a12c3708-0486-4603-b1a5-46d252e79082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "409a2c5c-d8b9-4d40-813c-79138edea40b",
                            EmailConfirmed = false,
                            FirstName = "Cherif",
                            IsActive = true,
                            LastName = "Nour",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bac82434-4b95-4031-96a6-f3ec8cb08eb9",
                            SupplyChainPartnerId = new Guid("81124c04-840a-49c1-8929-073af4cee139"),
                            TwoFactorEnabled = false,
                            UserName = "nourcherif.pitos25@gmail.com"
                        },
                        new
                        {
                            Id = "3542da56-0de3-4797-a059-effff257f63d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cd7f1236-33f1-4489-a354-9170e95da819",
                            EmailConfirmed = false,
                            FirstName = "Mattia",
                            IsActive = true,
                            LastName = "Mandorlini",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a5020b4e-d48c-47b3-9f8e-fb3d43e755a1",
                            SupplyChainPartnerId = new Guid("81124c04-840a-49c1-8929-073af4cee139"),
                            TwoFactorEnabled = false,
                            UserName = "mando3228@gmail.com"
                        },
                        new
                        {
                            Id = "f4242b5f-4b39-45fc-802e-391293414546",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6ce8c006-f8b9-4e71-a45a-dc8fb99e2b7b",
                            EmailConfirmed = false,
                            FirstName = "Samuele",
                            IsActive = true,
                            LastName = "Sacchetti",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "637b179c-7507-4943-9e4c-ddc3a664edc5",
                            SupplyChainPartnerId = new Guid("81124c04-840a-49c1-8929-073af4cee139"),
                            TwoFactorEnabled = false,
                            UserName = "sacchettisamuele@gmail.com"
                        },
                        new
                        {
                            Id = "5a6c9915-bdca-4a68-b452-da1f4e8b422f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4f6f1db-1555-4300-8735-319e6d68eba2",
                            EmailConfirmed = false,
                            FirstName = "Luca",
                            IsActive = true,
                            LastName = "Spalazzi",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce0eb992-89ee-4df6-9a60-4c5a995bceac",
                            SupplyChainPartnerId = new Guid("81124c04-840a-49c1-8929-073af4cee139"),
                            TwoFactorEnabled = false,
                            UserName = "l.spalazzi@staff.univpm.it"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.Authentication.UserTemporaryPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Attempts")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserTemporaryPassword");
                });

            modelBuilder.Entity("CochainAPI.Model.CarbonOffset.CarbonOffsettingAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmissionTransactionId")
                        .HasColumnType("text");

                    b.Property<bool>("IsProcessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float>("Offset")
                        .HasColumnType("real");

                    b.Property<Guid>("SupplyChainPartnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SupplyChainPartnerId");

                    b.ToTable("CarbonOffsettingAction");
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.CertificationAuthority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("WalletId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CertificationAuthority");
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.SupplyChainPartner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Credits")
                        .HasColumnType("real");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<Guid>("SupplyChainPartnerTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("WalletId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SupplyChainPartnerTypeId");

                    b.ToTable("SupplyChainPartner");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81124c04-840a-49c1-8929-073af4cee139"),
                            Credits = 100f,
                            Email = "company@test.com",
                            Name = "Test Company",
                            Phone = "33309090909",
                            SupplyChainPartnerTypeId = new Guid("ef0e7db4-760e-4515-9aa0-bda3fc766e87"),
                            WalletId = "0xfe3b557e8fb62b89f4916b721be55ceb828dbd73"
                        },
                        new
                        {
                            Id = new Guid("3a9f1b7c-5d2e-4a4f-8a6c-0e7d3b5a2f9c"),
                            Credits = 40f,
                            Email = "raw.material.supplier@test.com",
                            Name = "Raw Material Supplier",
                            Phone = "3669045897",
                            SupplyChainPartnerTypeId = new Guid("e1117db4-760e-4515-9aa0-11a3fa766e87"),
                            WalletId = "0x627306090abab3a6e1400e9345bc60c78a8bef57"
                        },
                        new
                        {
                            Id = new Guid("db2c2af0-5227-4d3c-b3eb-daf45118aeff"),
                            Credits = 20f,
                            Email = "retailer@test.com",
                            Name = "Retailer",
                            Phone = "3669045897",
                            SupplyChainPartnerTypeId = new Guid("eaae7124-761e-4515-9aa0-bda3fc7aee87"),
                            WalletId = "0xf17f52151ebef6c7334fad080c5704d77216b732"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.SupplyChainPartnerType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Baseline")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SupplyChainPartnerType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1117db4-760e-4515-9aa0-11a3fa766e87"),
                            Baseline = 1000f,
                            Name = "Raw Material Supplier"
                        },
                        new
                        {
                            Id = new Guid("ef0e7db4-760e-4515-9aa0-bda3fc766e87"),
                            Baseline = 1000f,
                            Name = "Transporter"
                        },
                        new
                        {
                            Id = new Guid("ef01b3b4-760e-4515-9aa0-bdab7c766e87"),
                            Baseline = 1000f,
                            Name = "Processing"
                        },
                        new
                        {
                            Id = new Guid("ab2e7db4-760e-4515-9aa0-bda314266e87"),
                            Baseline = 1000f,
                            Name = "Storage"
                        },
                        new
                        {
                            Id = new Guid("ef0e7124-744e-1115-9ba0-bda3fc766e87"),
                            Baseline = 1000f,
                            Name = "Retailer"
                        },
                        new
                        {
                            Id = new Guid("eaae7124-761e-4515-9aa0-bda3fc7aee87"),
                            Baseline = 1000f,
                            Name = "Wholesaler"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.Transaction", b =>
                {
                    b.Property<string>("TransactionHash")
                        .HasColumnType("text");

                    b.Property<string>("WalletIdEmitter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WalletIdReceiver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TransactionHash");

                    b.HasIndex("WalletIdEmitter");

                    b.HasIndex("WalletIdReceiver");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductLifeCycleCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupplyChainPartnerReceiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UserEmitterId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductLifeCycleCategoryId");

                    b.HasIndex("SupplyChainPartnerReceiverId");

                    b.HasIndex("UserEmitterId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.ProductDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductInfoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupplyChainPartnerReceiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UserEmitterId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductInfoId");

                    b.HasIndex("SupplyChainPartnerReceiverId");

                    b.HasIndex("UserEmitterId");

                    b.ToTable("ProductDocument");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.ProductLifeCycleDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductLifeCycleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupplyChainPartnerReceiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UserEmitterId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductLifeCycleId");

                    b.HasIndex("SupplyChainPartnerReceiverId");

                    b.HasIndex("UserEmitterId");

                    b.ToTable("ProductLifeCycleDocument");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.SupplyChainPartnerCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("QualityStandard")
                        .HasColumnType("text");

                    b.Property<Guid?>("SupplyChainPartnerReceiverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UserEmitterId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SupplyChainPartnerReceiverId");

                    b.HasIndex("UserEmitterId");

                    b.ToTable("SupplyChainPartnerCertificate");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("111aaa22-bb33-cc44-dd55-ee66ff778899"),
                            CategoryId = new Guid("a1b2c3d4-e5f6-7890-ab12-cd34ef567890"),
                            Description = "Boneless, skinless chicken breast.",
                            Name = "Chicken Breast"
                        },
                        new
                        {
                            Id = new Guid("222bbb33-cc44-dd55-ee66-ff778899aabb"),
                            CategoryId = new Guid("b2c3d4e5-f678-9012-abcd-34ef56789012"),
                            Description = "Fresh Atlantic salmon fillet.",
                            Name = "Salmon Fillet"
                        },
                        new
                        {
                            Id = new Guid("333ccc44-dd55-ee66-ff77-8899aabbccdd"),
                            CategoryId = new Guid("c3d4e5f6-7890-1234-abcd-56ef78901234"),
                            Description = "Organic fresh carrots.",
                            Name = "Carrots"
                        },
                        new
                        {
                            Id = new Guid("444ddd55-ee66-ff77-8899-aabbccddeeff"),
                            CategoryId = new Guid("d4e5f678-9012-3456-abcd-78ef90123456"),
                            Description = "Sweet and ripe bananas.",
                            Name = "Bananas"
                        },
                        new
                        {
                            Id = new Guid("555eee66-ff77-8899-aabb-ccddeeff0011"),
                            CategoryId = new Guid("e5f67890-1234-5678-abcd-90ef12345678"),
                            Description = "Pasteurized whole milk.",
                            Name = "Whole Milk"
                        },
                        new
                        {
                            Id = new Guid("666fff77-8899-aabb-ccdd-eeff00112233"),
                            CategoryId = new Guid("f6789012-3456-7890-abcd-12ef34567890"),
                            Description = "Traditional French bread.",
                            Name = "Baguette"
                        },
                        new
                        {
                            Id = new Guid("77711188-999a-bbcc-ddee-ff0011223344"),
                            CategoryId = new Guid("78901234-5678-9012-abcd-34ef56789012"),
                            Description = "Italian durum wheat spaghetti.",
                            Name = "Spaghetti"
                        },
                        new
                        {
                            Id = new Guid("88822299-aabb-ccdd-eeff-001122334455"),
                            CategoryId = new Guid("89012345-6789-0123-abcd-56ef78901234"),
                            Description = "100% fresh squeezed orange juice.",
                            Name = "Orange Juice"
                        },
                        new
                        {
                            Id = new Guid("999333aa-bbcc-ddee-ff00-112233445566"),
                            CategoryId = new Guid("90123456-7890-1234-abcd-78ef90123456"),
                            Description = "Creamy milk chocolate bar.",
                            Name = "Milk Chocolate Bar"
                        },
                        new
                        {
                            Id = new Guid("aaa444bb-ccdd-eeff-0011-223344556677"),
                            CategoryId = new Guid("12345678-9012-3456-abcd-90ef12345678"),
                            Description = "Extra virgin olive oil.",
                            Name = "Olive Oil"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-ab12-cd34ef567890"),
                            Description = "Fresh and processed meat including beef, pork, chicken, and more.",
                            Name = "Meat"
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f678-9012-abcd-34ef56789012"),
                            Description = "Fresh, frozen, and processed seafood products.",
                            Name = "Fish"
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-7890-1234-abcd-56ef78901234"),
                            Description = "Fresh, organic, and frozen vegetables.",
                            Name = "Vegetables"
                        },
                        new
                        {
                            Id = new Guid("d4e5f678-9012-3456-abcd-78ef90123456"),
                            Description = "Fresh, dried, and packaged fruits.",
                            Name = "Fruits"
                        },
                        new
                        {
                            Id = new Guid("e5f67890-1234-5678-abcd-90ef12345678"),
                            Description = "Milk, cheese, yogurt, and other dairy products.",
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = new Guid("f6789012-3456-7890-abcd-12ef34567890"),
                            Description = "Fresh bread, biscuits, breadsticks, and other baked goods.",
                            Name = "Bakery Products"
                        },
                        new
                        {
                            Id = new Guid("78901234-5678-9012-abcd-34ef56789012"),
                            Description = "Dry, fresh, whole wheat pasta, and different types of rice.",
                            Name = "Pasta & Rice"
                        },
                        new
                        {
                            Id = new Guid("89012345-6789-0123-abcd-56ef78901234"),
                            Description = "Soft drinks, fruit juices, water, and alcoholic beverages.",
                            Name = "Beverages"
                        },
                        new
                        {
                            Id = new Guid("90123456-7890-1234-abcd-78ef90123456"),
                            Description = "Chocolate, candies, chips, and other sweet and salty snacks.",
                            Name = "Sweets & Snacks"
                        },
                        new
                        {
                            Id = new Guid("12345678-9012-3456-abcd-90ef12345678"),
                            Description = "Oil, vinegar, salt, pepper, and other spices.",
                            Name = "Condiments & Spices"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupplyChainPartnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("TokenId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplyChainPartnerId");

                    b.ToTable("ProductInfo");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductIngredient", b =>
                {
                    b.Property<Guid>("ProductInfoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductInfoId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("ProductIngredient");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductLifeCycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmissionTransactionId")
                        .HasColumnType("text");

                    b.Property<float>("Emissions")
                        .HasColumnType("real");

                    b.Property<bool>("IsEmissionProcessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProductInfoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductLifeCycleCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupplyChainPartnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductInfoId");

                    b.HasIndex("ProductLifeCycleCategoryId");

                    b.HasIndex("SupplyChainPartnerId");

                    b.ToTable("ProductLifeCycle");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductLifeCycleCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductLifeCycleCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef94c672-c755-449b-8ee8-327a12bed7ef"),
                            Description = "Product transportation.",
                            Name = "Transport"
                        },
                        new
                        {
                            Id = new Guid("a9d12b5f-1e2d-45c9-bb5d-3d8a7c2b4a33"),
                            Description = "Product manufacturing activities.",
                            Name = "Production"
                        },
                        new
                        {
                            Id = new Guid("b1e2d3f4-5678-90ab-cdef-1234567890ab"),
                            Description = "Raw material processing activities.",
                            Name = "Processing"
                        },
                        new
                        {
                            Id = new Guid("c1d2e3f4-6789-0abc-def1-234567890abc"),
                            Description = "Product sales activities.",
                            Name = "Sales"
                        },
                        new
                        {
                            Id = new Guid("d2e3f4a5-7890-1bcd-ef12-34567890abcd"),
                            Description = "Post-sales customer assistance.",
                            Name = "Customer Support"
                        },
                        new
                        {
                            Id = new Guid("e3a18178-8db7-48f2-a76b-9ad329bba5f2"),
                            Description = "Plowing and soil preparation activities using techniques aimed at minimizing the use of heavy machinery to reduce emissions.",
                            Name = "Soil Preparation"
                        },
                        new
                        {
                            Id = new Guid("f3b19128-0edc-4f59-8a27-6a8d3509876c"),
                            Description = "Precision seeding activities to optimize resource use and reduce environmental impact.",
                            Name = "Seeding"
                        },
                        new
                        {
                            Id = new Guid("a4c2d7e6-6f5e-42f9-b7c1-1234567890ef"),
                            Description = "Implementation of efficient irrigation systems to reduce water and energy consumption.",
                            Name = "Sustainable Irrigation"
                        },
                        new
                        {
                            Id = new Guid("b5d3e8f7-7e6f-43d0-c8d2-0987654321ba"),
                            Description = "Use of natural or slow-release fertilizers to minimize greenhouse gas emissions.",
                            Name = "Low-Impact Fertilization"
                        },
                        new
                        {
                            Id = new Guid("c6e4f9a8-8f70-44e1-d9e3-1029384756cd"),
                            Description = "Adoption of integrated pest control practices, reducing chemical pesticide use and environmental impact.",
                            Name = "Pest Management"
                        },
                        new
                        {
                            Id = new Guid("d7f50ab9-9a81-45f2-eaf4-5647382910ef"),
                            Description = "Optimized harvesting processes to minimize energy consumption and emissions from internal transport.",
                            Name = "Harvesting"
                        },
                        new
                        {
                            Id = new Guid("e8a61bca-ab92-46f3-fb05-6758493021f0"),
                            Description = "Selection, washing, and storage activities using low-energy impact techniques to maintain product quality.",
                            Name = "Post-Harvest & Storage"
                        },
                        new
                        {
                            Id = new Guid("f9b72cdb-bc03-47f4-0c16-78695a4132f1"),
                            Description = "Use of recyclable materials and low-impact processes to reduce the carbon footprint of packaging.",
                            Name = "Eco-Friendly Packaging"
                        });
                });

            modelBuilder.Entity("CochainAPI.Model.Utils.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cookies")
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("QueryString")
                        .HasColumnType("text");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "8e342ad6-78d9-4aee-abe5-245b1fae6c4a",
                            Name = "SystemAdmin",
                            NormalizedName = "SYSTEMADMIN"
                        },
                        new
                        {
                            Id = "cb5b1ae5-43db-4096-9bd6-2afb90fb20c5",
                            Name = "AdminSCP",
                            NormalizedName = "ADMINSCP"
                        },
                        new
                        {
                            Id = "f6e7ea1d-a99e-4a5c-9a23-2274ba2c62ea",
                            Name = "AdminCA",
                            NormalizedName = "ADMINCA"
                        },
                        new
                        {
                            Id = "a0e8b03e-0cd8-4458-a147-1a4b88df2997",
                            Name = "UserSCP",
                            NormalizedName = "USERSCP"
                        },
                        new
                        {
                            Id = "3318013d-0cdd-4749-9ab3-6fdca9b64564",
                            Name = "UserCA",
                            NormalizedName = "USERCA"
                        },
                        new
                        {
                            Id = "916a3160-05e5-4821-88fe-9e46a43d157c",
                            Name = "SCPTransporter",
                            NormalizedName = "SCPTRANSPORTER"
                        },
                        new
                        {
                            Id = "cccf28ca-b2f8-477f-a2c1-2436cd83ec0c",
                            Name = "SCPRawMaterial",
                            NormalizedName = "SCPRAWMATERIAL"
                        },
                        new
                        {
                            Id = "f08d90db-ac61-4c92-a229-ef803b672e60",
                            Name = "SCPTransformator",
                            NormalizedName = "SCPTRANSFORMATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "ad00648b-a031-432d-b007-6a0829cf5292",
                            RoleId = "8e342ad6-78d9-4aee-abe5-245b1fae6c4a"
                        },
                        new
                        {
                            UserId = "5e4b0ca8-aa85-417a-af23-035ac1b555cd",
                            RoleId = "8e342ad6-78d9-4aee-abe5-245b1fae6c4a"
                        },
                        new
                        {
                            UserId = "0a317b04-2f87-4b08-8ad8-597103527584",
                            RoleId = "8e342ad6-78d9-4aee-abe5-245b1fae6c4a"
                        },
                        new
                        {
                            UserId = "a12c3708-0486-4603-b1a5-46d252e79082",
                            RoleId = "8e342ad6-78d9-4aee-abe5-245b1fae6c4a"
                        },
                        new
                        {
                            UserId = "3542da56-0de3-4797-a059-effff257f63d",
                            RoleId = "8e342ad6-78d9-4aee-abe5-245b1fae6c4a"
                        },
                        new
                        {
                            UserId = "f4242b5f-4b39-45fc-802e-391293414546",
                            RoleId = "8e342ad6-78d9-4aee-abe5-245b1fae6c4a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Value", "UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("CochainAPI.Model.Authentication.User", b =>
                {
                    b.HasOne("CochainAPI.Model.CompanyEntities.CertificationAuthority", "CertificationAuthority")
                        .WithMany()
                        .HasForeignKey("CertificationAuthorityId");

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartner")
                        .WithMany()
                        .HasForeignKey("SupplyChainPartnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CertificationAuthority");

                    b.Navigation("SupplyChainPartner");
                });

            modelBuilder.Entity("CochainAPI.Model.Authentication.UserTemporaryPassword", b =>
                {
                    b.HasOne("CochainAPI.Model.Authentication.User", "User")
                        .WithMany("TemporaryPasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CochainAPI.Model.CarbonOffset.CarbonOffsettingAction", b =>
                {
                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartner")
                        .WithMany("CarbonOffsettingActions")
                        .HasForeignKey("SupplyChainPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplyChainPartner");
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.SupplyChainPartner", b =>
                {
                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartnerType", "SupplyChainPartnerType")
                        .WithMany()
                        .HasForeignKey("SupplyChainPartnerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplyChainPartnerType");
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.Transaction", b =>
                {
                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartnerEmitter")
                        .WithMany("EmittedTransactions")
                        .HasForeignKey("WalletIdEmitter")
                        .HasPrincipalKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartnerReceiver")
                        .WithMany("ReceivedTransactions")
                        .HasForeignKey("WalletIdReceiver")
                        .HasPrincipalKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupplyChainPartnerEmitter");

                    b.Navigation("SupplyChainPartnerReceiver");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.Contract", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductLifeCycleCategory", "ProductLifeCycleCategory")
                        .WithMany()
                        .HasForeignKey("ProductLifeCycleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartnerReceiver")
                        .WithMany("ReceivedContract")
                        .HasForeignKey("SupplyChainPartnerReceiverId");

                    b.HasOne("CochainAPI.Model.Authentication.User", "UserEmitter")
                        .WithMany("EmittedContract")
                        .HasForeignKey("UserEmitterId");

                    b.Navigation("ProductLifeCycleCategory");

                    b.Navigation("SupplyChainPartnerReceiver");

                    b.Navigation("UserEmitter");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.ProductDocument", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductInfo", "ProductInfo")
                        .WithMany("ProductDocuments")
                        .HasForeignKey("ProductInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartnerReceiver")
                        .WithMany("ReceivedProductDocument")
                        .HasForeignKey("SupplyChainPartnerReceiverId");

                    b.HasOne("CochainAPI.Model.Authentication.User", "UserEmitter")
                        .WithMany("EmittedProductDocument")
                        .HasForeignKey("UserEmitterId");

                    b.Navigation("ProductInfo");

                    b.Navigation("SupplyChainPartnerReceiver");

                    b.Navigation("UserEmitter");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.ProductLifeCycleDocument", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductLifeCycle", "ProductLifeCycle")
                        .WithMany("ProductLifeCycleDocuments")
                        .HasForeignKey("ProductLifeCycleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartnerReceiver")
                        .WithMany("ReceivedProductLifeCycleDocument")
                        .HasForeignKey("SupplyChainPartnerReceiverId");

                    b.HasOne("CochainAPI.Model.Authentication.User", "UserEmitter")
                        .WithMany("EmittedProductLifeCycleDocument")
                        .HasForeignKey("UserEmitterId");

                    b.Navigation("ProductLifeCycle");

                    b.Navigation("SupplyChainPartnerReceiver");

                    b.Navigation("UserEmitter");
                });

            modelBuilder.Entity("CochainAPI.Model.Documents.SupplyChainPartnerCertificate", b =>
                {
                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartnerReceiver")
                        .WithMany("ReceivedSupplyChainPartnerCertificate")
                        .HasForeignKey("SupplyChainPartnerReceiverId");

                    b.HasOne("CochainAPI.Model.Authentication.User", "UserEmitter")
                        .WithMany("EmittedSupplyChainPartnerCertificate")
                        .HasForeignKey("UserEmitterId");

                    b.Navigation("SupplyChainPartnerReceiver");

                    b.Navigation("UserEmitter");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.Product", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductInfo", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartner")
                        .WithMany()
                        .HasForeignKey("SupplyChainPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SupplyChainPartner");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductIngredient", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductInfo", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.Product.ProductInfo", "ProductInfo")
                        .WithMany("Ingredients")
                        .HasForeignKey("ProductInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("ProductInfo");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductLifeCycle", b =>
                {
                    b.HasOne("CochainAPI.Model.Product.ProductInfo", "ProductInfo")
                        .WithMany("ProductLifeCycles")
                        .HasForeignKey("ProductInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.Product.ProductLifeCycleCategory", "ProductLifeCycleCategory")
                        .WithMany()
                        .HasForeignKey("ProductLifeCycleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CochainAPI.Model.CompanyEntities.SupplyChainPartner", "SupplyChainPartner")
                        .WithMany()
                        .HasForeignKey("SupplyChainPartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInfo");

                    b.Navigation("ProductLifeCycleCategory");

                    b.Navigation("SupplyChainPartner");
                });

            modelBuilder.Entity("CochainAPI.Model.Utils.Log", b =>
                {
                    b.HasOne("CochainAPI.Model.Authentication.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CochainAPI.Model.Authentication.User", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CochainAPI.Model.Authentication.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CochainAPI.Model.Authentication.User", b =>
                {
                    b.Navigation("EmittedContract");

                    b.Navigation("EmittedProductDocument");

                    b.Navigation("EmittedProductLifeCycleDocument");

                    b.Navigation("EmittedSupplyChainPartnerCertificate");

                    b.Navigation("Logs");

                    b.Navigation("TemporaryPasswords");

                    b.Navigation("UserClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CochainAPI.Model.CompanyEntities.SupplyChainPartner", b =>
                {
                    b.Navigation("CarbonOffsettingActions");

                    b.Navigation("EmittedTransactions");

                    b.Navigation("ReceivedContract");

                    b.Navigation("ReceivedProductDocument");

                    b.Navigation("ReceivedProductLifeCycleDocument");

                    b.Navigation("ReceivedSupplyChainPartnerCertificate");

                    b.Navigation("ReceivedTransactions");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductInfo", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("ProductDocuments");

                    b.Navigation("ProductLifeCycles");
                });

            modelBuilder.Entity("CochainAPI.Model.Product.ProductLifeCycle", b =>
                {
                    b.Navigation("ProductLifeCycleDocuments");
                });
#pragma warning restore 612, 618
        }
    }
}
